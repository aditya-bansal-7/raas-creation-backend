// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Products {
  id                 String     @id @default(cuid())
  name               String
  description        String
  price              Float
  quantity_available Int
  category           Categories @relation(fields: [category_id], references: [id])
  category_id        String
  images             String[]
  color              String

  Variants Variants[]

  Review Review[]
}

model Categories {
  id         String     @id @default(cuid())
  name       String
  products   Products[]
  created_at DateTime   @default(now())
}

model Variants {
  id         String         @id @default(cuid())
  name       VariantsValues
  product    Products       @relation(fields: [product_id], references: [id])
  product_id String
  stock      Int

  OrderVariant OrderVariant[]
}

enum VariantsValues {
  SIZE_36
  SIZE_40
  SIZE_42
  SIZE_44
  SIZE_46
  SIZE_48
  SIZE_50
  SIZE_52
}

model Payment {
  id                String        @id @default(cuid())
  razorpayOrderId   String // Razorpay Order ID
  razorpayPaymentId String? // Razorpay Payment ID (can be null if not completed)
  razorpaySignature String? // Razorpay Signature (for validation)
  amount            Float // Payment amount
  currency          String // Currency, e.g., "INR"
  status            PaymentStatus @default(PENDING) // Status of payment
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

model User {
  id              String    @id @default(cuid())
  name            String
  username        String?   @unique
  email           String    @unique
  phone           String?   @unique
  password        String?
  refreshToken    String?   @db.Text
  emailVerified   DateTime?
  image           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  isEmailVerified Boolean   @default(false)

  Address Address[]

  Order Order[]

  Review Review[]
}

model Address {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  street    String
  city      String
  state     String
  country   String
  zip       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Order {
  id         String       @id @default(cuid())
  userId     String
  user       User         @relation(fields: [userId], references: [id])
  totalPrice Float
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  // Many-to-Many Relationship with Variants
  orderVariants OrderVariant[]
}

model Review {
  id        String @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
images      String[]
  rating    Int    @default(0)
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId String
 Product Products @relation(fields: [productId], references: [id])
 

 
}
model OrderVariant {
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    String
  variant    Variants @relation(fields: [variantId], references: [id])
  variantId  String
  quantity   Int

  @@id([orderId, variantId]) // Composite Primary Key
}

model Account {
  id                    String  @id @default(cuid())
  userId                String  @unique
  type                  String
  provider              String
  providerAccountId     String
  refreshToken          String? @db.Text
  accessToken           String? @db.Text
  expiresAt             Int?
  tokenType             String?
  scope                 String?
  idToken               String? @db.Text
  sessionState          String?
  refreshTokenExpiresIn Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}
