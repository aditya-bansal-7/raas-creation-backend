generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id            String          @id @default(cuid())
  name          String
  sku           String
  slug          String
  description   String
  price         Float
  discountPrice Float?
  category_id   String
  category      Category        @relation(fields: [category_id], references: [id])
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  status        ProductStatus   @default(DRAFT)
  colors        ProductColor[]
  assets        ProductAsset[]
  ProductRating ProductRating[]
  OrderItem     OrderItem[]
  Wishlist      Wishlist[]
  tags          ProductTags[]
}

model ProductTags {
  id        String  @id @default(cuid())
  tag       String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model ProductColor {
  id        String  @id @default(cuid())
  color     String // Example: "Red", "Blue", etc.
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  colorHex  String  @default("#FFFFFF") // Default color is white
  assets ProductAsset[] // Images for the specific color
  sizes  ProductVariant[]
}

model ProductVariant {
  id      String         @id @default(cuid())
  size    VariantsValues
  stock   Int
  color   ProductColor   @relation(fields: [colorId], references: [id], onDelete: Cascade)
  colorId String

  OrderItem OrderItem[]
}

model ProductAsset {
  id        String        @id @default(cuid())
  asset_url String
  product   Product?      @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String?
  type      AssetType     @default(IMAGE)
  color     ProductColor? @relation(fields: [colorId], references: [id], onDelete: Cascade)
  colorId   String?
}

model Category {
  id           String   @id @default(cuid())
  name         String
  description  String?
  priority     Int      @default(0)
  productCount Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  Product Product[]
}

enum ProductStatus {
  DRAFT
  PUBLISHED
}

enum AssetType {
  IMAGE
  VIDEO
}

enum VariantsValues {
  SIZE_36
  SIZE_38
  SIZE_40
  SIZE_42
  SIZE_44
  SIZE_46
}

model User {
  id                String    @id @default(cuid())
  name              String?
  mobile_no         String    @unique
  isPhoneNoVerified Boolean   @default(false)
  phoneNoVerified   DateTime?
  image             String?
  email             String?   @unique
  isEmailVerified   Boolean   @default(false)
  emailVerified     DateTime?
  accounts          Account[]
  sessions          Session[]
  password          String?
  role              UserType  @default(USER)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  Order         Order[]
  ProductRating ProductRating[]
  Address       Address[]
  Wishlist      Wishlist[]
  Otp           Otp[]
}

model Address {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String?
  addressName String
  phoneNumber String
  street      String
  aptNumber   String?
  city        String
  state       String
  country     String
  zipCode     String
  userId      String // Foreign key to User
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Order       Order[]
}

enum UserType {
  ADMIN
  USER
}

model Otp {
  id        String   @id @default(cuid())
  otp       String   @unique
  userphone String   @unique
  user      User     @relation(fields: [userphone], references: [mobile_no], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  jwt       String?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Order {
  id                String           @id @default(cuid())
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  items             OrderItem[] // Join table for order items
  total             Float
  status            OrderStatus
  orderId           Int?            @unique @default(autoincrement())
  NimbusPostOrderId Int?
  awb               String?
  DeliveryStatus    String?          @default("PENDING")
  etd               String?
  deliveredAt       DateTime?
  paid              Boolean          @default(false)
  fulfillment       OrderFulfillment
  IsDiscount        Boolean          @default(false)
  discount          Float?
  discountCode      String?
  razorpayOrderId  String?
  addressId         String
  address           Address          @relation(fields: [addressId], references: [id], onDelete: Cascade)
  events            NimbusPostEvent[]
  timelineEntries   ShipmentTimeline[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model OrderItem {
  id               String         @id @default(cuid())
  order            Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId          String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  productVariantId String
  quantity         Int
  priceAtOrder     Float
  color            String
  productImage     String
  productName      String
  size             String
  productId        String
  product          Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum OrderFulfillment {
  PENDING 
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

model NimbusPostEvent {
  id              String     @id @default(cuid())
  order           Order      @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId         String
  awbNumber       String?
  status          String      // e.g. "in transit"
  statusCode      String?     // e.g. "IT"
  message         String?
  eventTime       DateTime
  location        String?
  courierName     String?
  paymentType     String?
  edd             DateTime?
  rawPayload      Json        // Store original payload
  createdAt       DateTime    @default(now())
}

model ShipmentTimeline {
  id         String   @id @default(cuid())
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId    String
  label      String   // "Delivered", "Out for Delivery", etc.
  note       String?  // Additional detail e.g. "Scheduled for next day"
  timestamp  DateTime
  type       TimelineEventType @default(INFO)
  createdAt  DateTime @default(now())
  @@index([orderId])
}

enum TimelineEventType {
  INFO      // neutral e.g. "Shipment picked up"
  SUCCESS   // success e.g. "Delivered"
  WARNING   // e.g. "Delayed"
  ERROR     // failed delivery, exceptions
}


model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model ProductRating {
  id          String   @id @default(cuid())
  userId      String
  productId   String // Foreign key for product
  title       String
  description String
  image       String?
  rating      Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Testimonial {
  id          String   @id @default(cuid())
  username    String
  role        String
  description String
  image       String
  ratings     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ContactForm {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String
  message   String
  Status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model SalesSummary {
//   id           String   @id @default(cuid())
//   date         DateTime @unique
//   totalRevenue Float
//   salesGrowth  Float
//   totalOrders  Int
//   newCustomers Int

//   productId String
//   product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
// }

// model ProductPerformance {
//   id        String   @id @default(cuid())
//   productId String
//   product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
//   date      DateTime @default(now())
//   revenue   Decimal  @default(0.0)
//   orders    Int      @default(0)
//   rating    Float?
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@unique([productId, date]) // Ensures one record per product per day
//   @@index([date]) // Adds an index on the 'date' field
// }

model Wishlist {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
}

model Upoads {
  id        String   @id @default(cuid())
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Discount {
  id          String       @id @default(cuid())
  code        String       @unique
  type        DiscountType
  value       Float
  minPurchase Float? // Optional
  usageLimit  Int? // Optional (null means unlimited)
  usageCount  Int          @default(0)
  startDate   DateTime
  endDate     DateTime? // Optional (null means no expiration)
  status      Status       @default(ACTIVE)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum Status {
  ACTIVE
  INACTIVE
  EXPIRED
}

model ExtraData {
  id              String @id @default(cuid())
  CodLimit        Int?
  GSTtax          Float?
  ShiippingCharge Float?
}
